// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_site

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func SiteDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"asns": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"asn": schema.Int64Attribute{
							Computed:            true,
							Description:         "16- or 32-bit autonomous system number",
							MarkdownDescription: "16- or 32-bit autonomous system number",
						},
						"comments": schema.StringAttribute{
							Computed: true,
						},
						"created": schema.StringAttribute{
							Computed: true,
						},
						"custom_fields": schema.MapAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"display": schema.StringAttribute{
							Computed: true,
						},
						"display_url": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"last_updated": schema.StringAttribute{
							Computed: true,
						},
						"provider_count": schema.Int64Attribute{
							Computed: true,
						},
						"rir": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"aggregate_count": schema.Int64Attribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"display": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.Int64Attribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"url": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: RirType{
								ObjectType: types.ObjectType{
									AttrTypes: RirValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Adds support for custom fields and tags.",
							MarkdownDescription: "Adds support for custom fields and tags.",
						},
						"site_count": schema.Int64Attribute{
							Computed: true,
						},
						"tags": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"color": schema.StringAttribute{
										Computed: true,
									},
									"display": schema.StringAttribute{
										Computed: true,
									},
									"display_url": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.Int64Attribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"slug": schema.StringAttribute{
										Computed: true,
									},
									"url": schema.StringAttribute{
										Computed: true,
									},
								},
								CustomType: TagsType{
									ObjectType: types.ObjectType{
										AttrTypes: TagsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed: true,
						},
						"tenant": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"description": schema.StringAttribute{
									Computed: true,
								},
								"display": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.Int64Attribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"url": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: TenantType{
								ObjectType: types.ObjectType{
									AttrTypes: TenantValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Adds support for custom fields and tags.",
							MarkdownDescription: "Adds support for custom fields and tags.",
						},
						"url": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: AsnsType{
						ObjectType: types.ObjectType{
							AttrTypes: AsnsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"circuit_count": schema.Int64Attribute{
				Computed: true,
			},
			"comments": schema.StringAttribute{
				Computed: true,
			},
			"created": schema.StringAttribute{
				Computed: true,
			},
			"custom_fields": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"device_count": schema.Int64Attribute{
				Computed: true,
			},
			"display": schema.StringAttribute{
				Computed: true,
			},
			"display_url": schema.StringAttribute{
				Computed: true,
			},
			"facility": schema.StringAttribute{
				Computed:            true,
				Description:         "Local facility ID or description",
				MarkdownDescription: "Local facility ID or description",
			},
			"group": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"_depth": schema.Int64Attribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"display": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"site_count": schema.Int64Attribute{
						Computed: true,
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"url": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: GroupType{
					ObjectType: types.ObjectType{
						AttrTypes: GroupValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Extends PrimaryModelSerializer to include MPTT support.",
				MarkdownDescription: "Extends PrimaryModelSerializer to include MPTT support.",
			},
			"id": schema.Int64Attribute{
				Required:            true,
				Description:         "A unique integer value identifying this site.",
				MarkdownDescription: "A unique integer value identifying this site.",
			},
			"last_updated": schema.StringAttribute{
				Computed: true,
			},
			"latitude": schema.Float64Attribute{
				Computed:            true,
				Description:         "GPS coordinate in decimal format (xx.yyyyyy)",
				MarkdownDescription: "GPS coordinate in decimal format (xx.yyyyyy)",
			},
			"longitude": schema.Float64Attribute{
				Computed:            true,
				Description:         "GPS coordinate in decimal format (xx.yyyyyy)",
				MarkdownDescription: "GPS coordinate in decimal format (xx.yyyyyy)",
			},
			"name": schema.StringAttribute{
				Computed:            true,
				Description:         "Full name of the site",
				MarkdownDescription: "Full name of the site",
			},
			"physical_address": schema.StringAttribute{
				Computed:            true,
				Description:         "Physical location of the building",
				MarkdownDescription: "Physical location of the building",
			},
			"prefix_count": schema.Int64Attribute{
				Computed: true,
			},
			"rack_count": schema.Int64Attribute{
				Computed: true,
			},
			"region": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"_depth": schema.Int64Attribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"display": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"site_count": schema.Int64Attribute{
						Computed: true,
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"url": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: RegionType{
					ObjectType: types.ObjectType{
						AttrTypes: RegionValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Extends PrimaryModelSerializer to include MPTT support.",
				MarkdownDescription: "Extends PrimaryModelSerializer to include MPTT support.",
			},
			"shipping_address": schema.StringAttribute{
				Computed:            true,
				Description:         "If different from the physical address",
				MarkdownDescription: "If different from the physical address",
			},
			"slug": schema.StringAttribute{
				Computed: true,
			},
			"status": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"label": schema.StringAttribute{
						Computed: true,
					},
					"value": schema.StringAttribute{
						Computed:            true,
						Description:         "* `planned` - Planned\n* `staging` - Staging\n* `active` - Active\n* `decommissioning` - Decommissioning\n* `retired` - Retired",
						MarkdownDescription: "* `planned` - Planned\n* `staging` - Staging\n* `active` - Active\n* `decommissioning` - Decommissioning\n* `retired` - Retired",
					},
				},
				CustomType: StatusType{
					ObjectType: types.ObjectType{
						AttrTypes: StatusValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"tags": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"color": schema.StringAttribute{
							Computed: true,
						},
						"display": schema.StringAttribute{
							Computed: true,
						},
						"display_url": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"slug": schema.StringAttribute{
							Computed: true,
						},
						"url": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: TagsType{
						ObjectType: types.ObjectType{
							AttrTypes: TagsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"tenant": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed: true,
					},
					"display": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"url": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: TenantType{
					ObjectType: types.ObjectType{
						AttrTypes: TenantValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Adds support for custom fields and tags.",
				MarkdownDescription: "Adds support for custom fields and tags.",
			},
			"time_zone": schema.StringAttribute{
				Computed: true,
			},
			"url": schema.StringAttribute{
				Computed: true,
			},
			"virtualmachine_count": schema.Int64Attribute{
				Computed: true,
			},
			"vlan_count": schema.Int64Attribute{
				Computed: true,
			},
		},
	}
}

type SiteModel struct {
	Asns                types.List    `tfsdk:"asns"`
	CircuitCount        types.Int64   `tfsdk:"circuit_count"`
	Comments            types.String  `tfsdk:"comments"`
	Created             types.String  `tfsdk:"created"`
	CustomFields        types.Map     `tfsdk:"custom_fields"`
	Description         types.String  `tfsdk:"description"`
	DeviceCount         types.Int64   `tfsdk:"device_count"`
	Display             types.String  `tfsdk:"display"`
	DisplayUrl          types.String  `tfsdk:"display_url"`
	Facility            types.String  `tfsdk:"facility"`
	Group               GroupValue    `tfsdk:"group"`
	Id                  types.Int64   `tfsdk:"id"`
	LastUpdated         types.String  `tfsdk:"last_updated"`
	Latitude            types.Float64 `tfsdk:"latitude"`
	Longitude           types.Float64 `tfsdk:"longitude"`
	Name                types.String  `tfsdk:"name"`
	PhysicalAddress     types.String  `tfsdk:"physical_address"`
	PrefixCount         types.Int64   `tfsdk:"prefix_count"`
	RackCount           types.Int64   `tfsdk:"rack_count"`
	Region              RegionValue   `tfsdk:"region"`
	ShippingAddress     types.String  `tfsdk:"shipping_address"`
	Slug                types.String  `tfsdk:"slug"`
	Status              StatusValue   `tfsdk:"status"`
	Tags                types.List    `tfsdk:"tags"`
	Tenant              TenantValue   `tfsdk:"tenant"`
	TimeZone            types.String  `tfsdk:"time_zone"`
	Url                 types.String  `tfsdk:"url"`
	VirtualmachineCount types.Int64   `tfsdk:"virtualmachine_count"`
	VlanCount           types.Int64   `tfsdk:"vlan_count"`
}

var _ basetypes.ObjectTypable = AsnsType{}

type AsnsType struct {
	basetypes.ObjectType
}

func (t AsnsType) Equal(o attr.Type) bool {
	other, ok := o.(AsnsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AsnsType) String() string {
	return "AsnsType"
}

func (t AsnsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	asnAttribute, ok := attributes["asn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`asn is missing from object`)

		return nil, diags
	}

	asnVal, ok := asnAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`asn expected to be basetypes.Int64Value, was: %T`, asnAttribute))
	}

	commentsAttribute, ok := attributes["comments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comments is missing from object`)

		return nil, diags
	}

	commentsVal, ok := commentsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comments expected to be basetypes.StringValue, was: %T`, commentsAttribute))
	}

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return nil, diags
	}

	createdVal, ok := createdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.StringValue, was: %T`, createdAttribute))
	}

	customFieldsAttribute, ok := attributes["custom_fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_fields is missing from object`)

		return nil, diags
	}

	customFieldsVal, ok := customFieldsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_fields expected to be basetypes.MapValue, was: %T`, customFieldsAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return nil, diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	displayUrlAttribute, ok := attributes["display_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_url is missing from object`)

		return nil, diags
	}

	displayUrlVal, ok := displayUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_url expected to be basetypes.StringValue, was: %T`, displayUrlAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	lastUpdatedAttribute, ok := attributes["last_updated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_updated is missing from object`)

		return nil, diags
	}

	lastUpdatedVal, ok := lastUpdatedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_updated expected to be basetypes.StringValue, was: %T`, lastUpdatedAttribute))
	}

	providerCountAttribute, ok := attributes["provider_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_count is missing from object`)

		return nil, diags
	}

	providerCountVal, ok := providerCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_count expected to be basetypes.Int64Value, was: %T`, providerCountAttribute))
	}

	rirAttribute, ok := attributes["rir"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rir is missing from object`)

		return nil, diags
	}

	rirVal, ok := rirAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rir expected to be basetypes.ObjectValue, was: %T`, rirAttribute))
	}

	siteCountAttribute, ok := attributes["site_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_count is missing from object`)

		return nil, diags
	}

	siteCountVal, ok := siteCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_count expected to be basetypes.Int64Value, was: %T`, siteCountAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return nil, diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	tenantAttribute, ok := attributes["tenant"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenant is missing from object`)

		return nil, diags
	}

	tenantVal, ok := tenantAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenant expected to be basetypes.ObjectValue, was: %T`, tenantAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AsnsValue{
		Asn:           asnVal,
		Comments:      commentsVal,
		Created:       createdVal,
		CustomFields:  customFieldsVal,
		Description:   descriptionVal,
		Display:       displayVal,
		DisplayUrl:    displayUrlVal,
		Id:            idVal,
		LastUpdated:   lastUpdatedVal,
		ProviderCount: providerCountVal,
		Rir:           rirVal,
		SiteCount:     siteCountVal,
		Tags:          tagsVal,
		Tenant:        tenantVal,
		Url:           urlVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAsnsValueNull() AsnsValue {
	return AsnsValue{
		state: attr.ValueStateNull,
	}
}

func NewAsnsValueUnknown() AsnsValue {
	return AsnsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAsnsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AsnsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AsnsValue Attribute Value",
				"While creating a AsnsValue value, a missing attribute value was detected. "+
					"A AsnsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AsnsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AsnsValue Attribute Type",
				"While creating a AsnsValue value, an invalid attribute value was detected. "+
					"A AsnsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AsnsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AsnsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AsnsValue Attribute Value",
				"While creating a AsnsValue value, an extra attribute value was detected. "+
					"A AsnsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AsnsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAsnsValueUnknown(), diags
	}

	asnAttribute, ok := attributes["asn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`asn is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	asnVal, ok := asnAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`asn expected to be basetypes.Int64Value, was: %T`, asnAttribute))
	}

	commentsAttribute, ok := attributes["comments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comments is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	commentsVal, ok := commentsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comments expected to be basetypes.StringValue, was: %T`, commentsAttribute))
	}

	createdAttribute, ok := attributes["created"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	createdVal, ok := createdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created expected to be basetypes.StringValue, was: %T`, createdAttribute))
	}

	customFieldsAttribute, ok := attributes["custom_fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_fields is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	customFieldsVal, ok := customFieldsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_fields expected to be basetypes.MapValue, was: %T`, customFieldsAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	displayUrlAttribute, ok := attributes["display_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_url is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	displayUrlVal, ok := displayUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_url expected to be basetypes.StringValue, was: %T`, displayUrlAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	lastUpdatedAttribute, ok := attributes["last_updated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_updated is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	lastUpdatedVal, ok := lastUpdatedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_updated expected to be basetypes.StringValue, was: %T`, lastUpdatedAttribute))
	}

	providerCountAttribute, ok := attributes["provider_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provider_count is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	providerCountVal, ok := providerCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provider_count expected to be basetypes.Int64Value, was: %T`, providerCountAttribute))
	}

	rirAttribute, ok := attributes["rir"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rir is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	rirVal, ok := rirAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rir expected to be basetypes.ObjectValue, was: %T`, rirAttribute))
	}

	siteCountAttribute, ok := attributes["site_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_count is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	siteCountVal, ok := siteCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_count expected to be basetypes.Int64Value, was: %T`, siteCountAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	tenantAttribute, ok := attributes["tenant"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenant is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	tenantVal, ok := tenantAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenant expected to be basetypes.ObjectValue, was: %T`, tenantAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewAsnsValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewAsnsValueUnknown(), diags
	}

	return AsnsValue{
		Asn:           asnVal,
		Comments:      commentsVal,
		Created:       createdVal,
		CustomFields:  customFieldsVal,
		Description:   descriptionVal,
		Display:       displayVal,
		DisplayUrl:    displayUrlVal,
		Id:            idVal,
		LastUpdated:   lastUpdatedVal,
		ProviderCount: providerCountVal,
		Rir:           rirVal,
		SiteCount:     siteCountVal,
		Tags:          tagsVal,
		Tenant:        tenantVal,
		Url:           urlVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAsnsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AsnsValue {
	object, diags := NewAsnsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAsnsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AsnsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAsnsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAsnsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAsnsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAsnsValueMust(AsnsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AsnsType) ValueType(ctx context.Context) attr.Value {
	return AsnsValue{}
}

var _ basetypes.ObjectValuable = AsnsValue{}

type AsnsValue struct {
	Asn           basetypes.Int64Value  `tfsdk:"asn"`
	Comments      basetypes.StringValue `tfsdk:"comments"`
	Created       basetypes.StringValue `tfsdk:"created"`
	CustomFields  basetypes.MapValue    `tfsdk:"custom_fields"`
	Description   basetypes.StringValue `tfsdk:"description"`
	Display       basetypes.StringValue `tfsdk:"display"`
	DisplayUrl    basetypes.StringValue `tfsdk:"display_url"`
	Id            basetypes.Int64Value  `tfsdk:"id"`
	LastUpdated   basetypes.StringValue `tfsdk:"last_updated"`
	ProviderCount basetypes.Int64Value  `tfsdk:"provider_count"`
	Rir           basetypes.ObjectValue `tfsdk:"rir"`
	SiteCount     basetypes.Int64Value  `tfsdk:"site_count"`
	Tags          basetypes.ListValue   `tfsdk:"tags"`
	Tenant        basetypes.ObjectValue `tfsdk:"tenant"`
	Url           basetypes.StringValue `tfsdk:"url"`
	state         attr.ValueState
}

func (v AsnsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 15)

	var val tftypes.Value
	var err error

	attrTypes["asn"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["comments"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["custom_fields"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["last_updated"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provider_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["rir"] = basetypes.ObjectType{
		AttrTypes: RirValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["site_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["tags"] = basetypes.ListType{
		ElemType: TagsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["tenant"] = basetypes.ObjectType{
		AttrTypes: TenantValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 15)

		val, err = v.Asn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["asn"] = val

		val, err = v.Comments.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["comments"] = val

		val, err = v.Created.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created"] = val

		val, err = v.CustomFields.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_fields"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Display.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display"] = val

		val, err = v.DisplayUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display_url"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.LastUpdated.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_updated"] = val

		val, err = v.ProviderCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provider_count"] = val

		val, err = v.Rir.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rir"] = val

		val, err = v.SiteCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_count"] = val

		val, err = v.Tags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tags"] = val

		val, err = v.Tenant.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tenant"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AsnsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AsnsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AsnsValue) String() string {
	return "AsnsValue"
}

func (v AsnsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var rir basetypes.ObjectValue

	if v.Rir.IsNull() {
		rir = types.ObjectNull(
			RirValue{}.AttributeTypes(ctx),
		)
	}

	if v.Rir.IsUnknown() {
		rir = types.ObjectUnknown(
			RirValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Rir.IsNull() && !v.Rir.IsUnknown() {
		rir = types.ObjectValueMust(
			RirValue{}.AttributeTypes(ctx),
			v.Rir.Attributes(),
		)
	}

	tags := types.ListValueMust(
		TagsType{
			basetypes.ObjectType{
				AttrTypes: TagsValue{}.AttributeTypes(ctx),
			},
		},
		v.Tags.Elements(),
	)

	if v.Tags.IsNull() {
		tags = types.ListNull(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Tags.IsUnknown() {
		tags = types.ListUnknown(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var tenant basetypes.ObjectValue

	if v.Tenant.IsNull() {
		tenant = types.ObjectNull(
			TenantValue{}.AttributeTypes(ctx),
		)
	}

	if v.Tenant.IsUnknown() {
		tenant = types.ObjectUnknown(
			TenantValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Tenant.IsNull() && !v.Tenant.IsUnknown() {
		tenant = types.ObjectValueMust(
			TenantValue{}.AttributeTypes(ctx),
			v.Tenant.Attributes(),
		)
	}

	var customFieldsVal basetypes.MapValue
	switch {
	case v.CustomFields.IsUnknown():
		customFieldsVal = types.MapUnknown(types.StringType)
	case v.CustomFields.IsNull():
		customFieldsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		customFieldsVal, d = types.MapValue(types.StringType, v.CustomFields.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"asn":      basetypes.Int64Type{},
			"comments": basetypes.StringType{},
			"created":  basetypes.StringType{},
			"custom_fields": basetypes.MapType{
				ElemType: types.StringType,
			},
			"description":    basetypes.StringType{},
			"display":        basetypes.StringType{},
			"display_url":    basetypes.StringType{},
			"id":             basetypes.Int64Type{},
			"last_updated":   basetypes.StringType{},
			"provider_count": basetypes.Int64Type{},
			"rir": basetypes.ObjectType{
				AttrTypes: RirValue{}.AttributeTypes(ctx),
			},
			"site_count": basetypes.Int64Type{},
			"tags": basetypes.ListType{
				ElemType: TagsValue{}.Type(ctx),
			},
			"tenant": basetypes.ObjectType{
				AttrTypes: TenantValue{}.AttributeTypes(ctx),
			},
			"url": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"asn":      basetypes.Int64Type{},
		"comments": basetypes.StringType{},
		"created":  basetypes.StringType{},
		"custom_fields": basetypes.MapType{
			ElemType: types.StringType,
		},
		"description":    basetypes.StringType{},
		"display":        basetypes.StringType{},
		"display_url":    basetypes.StringType{},
		"id":             basetypes.Int64Type{},
		"last_updated":   basetypes.StringType{},
		"provider_count": basetypes.Int64Type{},
		"rir": basetypes.ObjectType{
			AttrTypes: RirValue{}.AttributeTypes(ctx),
		},
		"site_count": basetypes.Int64Type{},
		"tags": basetypes.ListType{
			ElemType: TagsValue{}.Type(ctx),
		},
		"tenant": basetypes.ObjectType{
			AttrTypes: TenantValue{}.AttributeTypes(ctx),
		},
		"url": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"asn":            v.Asn,
			"comments":       v.Comments,
			"created":        v.Created,
			"custom_fields":  customFieldsVal,
			"description":    v.Description,
			"display":        v.Display,
			"display_url":    v.DisplayUrl,
			"id":             v.Id,
			"last_updated":   v.LastUpdated,
			"provider_count": v.ProviderCount,
			"rir":            rir,
			"site_count":     v.SiteCount,
			"tags":           tags,
			"tenant":         tenant,
			"url":            v.Url,
		})

	return objVal, diags
}

func (v AsnsValue) Equal(o attr.Value) bool {
	other, ok := o.(AsnsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Asn.Equal(other.Asn) {
		return false
	}

	if !v.Comments.Equal(other.Comments) {
		return false
	}

	if !v.Created.Equal(other.Created) {
		return false
	}

	if !v.CustomFields.Equal(other.CustomFields) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Display.Equal(other.Display) {
		return false
	}

	if !v.DisplayUrl.Equal(other.DisplayUrl) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.LastUpdated.Equal(other.LastUpdated) {
		return false
	}

	if !v.ProviderCount.Equal(other.ProviderCount) {
		return false
	}

	if !v.Rir.Equal(other.Rir) {
		return false
	}

	if !v.SiteCount.Equal(other.SiteCount) {
		return false
	}

	if !v.Tags.Equal(other.Tags) {
		return false
	}

	if !v.Tenant.Equal(other.Tenant) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v AsnsValue) Type(ctx context.Context) attr.Type {
	return AsnsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AsnsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"asn":      basetypes.Int64Type{},
		"comments": basetypes.StringType{},
		"created":  basetypes.StringType{},
		"custom_fields": basetypes.MapType{
			ElemType: types.StringType,
		},
		"description":    basetypes.StringType{},
		"display":        basetypes.StringType{},
		"display_url":    basetypes.StringType{},
		"id":             basetypes.Int64Type{},
		"last_updated":   basetypes.StringType{},
		"provider_count": basetypes.Int64Type{},
		"rir": basetypes.ObjectType{
			AttrTypes: RirValue{}.AttributeTypes(ctx),
		},
		"site_count": basetypes.Int64Type{},
		"tags": basetypes.ListType{
			ElemType: TagsValue{}.Type(ctx),
		},
		"tenant": basetypes.ObjectType{
			AttrTypes: TenantValue{}.AttributeTypes(ctx),
		},
		"url": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = RirType{}

type RirType struct {
	basetypes.ObjectType
}

func (t RirType) Equal(o attr.Type) bool {
	other, ok := o.(RirType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RirType) String() string {
	return "RirType"
}

func (t RirType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	aggregateCountAttribute, ok := attributes["aggregate_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aggregate_count is missing from object`)

		return nil, diags
	}

	aggregateCountVal, ok := aggregateCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aggregate_count expected to be basetypes.Int64Value, was: %T`, aggregateCountAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return nil, diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RirValue{
		AggregateCount: aggregateCountVal,
		Description:    descriptionVal,
		Display:        displayVal,
		Id:             idVal,
		Name:           nameVal,
		Slug:           slugVal,
		Url:            urlVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewRirValueNull() RirValue {
	return RirValue{
		state: attr.ValueStateNull,
	}
}

func NewRirValueUnknown() RirValue {
	return RirValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRirValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RirValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RirValue Attribute Value",
				"While creating a RirValue value, a missing attribute value was detected. "+
					"A RirValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RirValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RirValue Attribute Type",
				"While creating a RirValue value, an invalid attribute value was detected. "+
					"A RirValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RirValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RirValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RirValue Attribute Value",
				"While creating a RirValue value, an extra attribute value was detected. "+
					"A RirValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RirValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRirValueUnknown(), diags
	}

	aggregateCountAttribute, ok := attributes["aggregate_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aggregate_count is missing from object`)

		return NewRirValueUnknown(), diags
	}

	aggregateCountVal, ok := aggregateCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aggregate_count expected to be basetypes.Int64Value, was: %T`, aggregateCountAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewRirValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return NewRirValueUnknown(), diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewRirValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewRirValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewRirValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewRirValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewRirValueUnknown(), diags
	}

	return RirValue{
		AggregateCount: aggregateCountVal,
		Description:    descriptionVal,
		Display:        displayVal,
		Id:             idVal,
		Name:           nameVal,
		Slug:           slugVal,
		Url:            urlVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewRirValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RirValue {
	object, diags := NewRirValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRirValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RirType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRirValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRirValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRirValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRirValueMust(RirValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RirType) ValueType(ctx context.Context) attr.Value {
	return RirValue{}
}

var _ basetypes.ObjectValuable = RirValue{}

type RirValue struct {
	AggregateCount basetypes.Int64Value  `tfsdk:"aggregate_count"`
	Description    basetypes.StringValue `tfsdk:"description"`
	Display        basetypes.StringValue `tfsdk:"display"`
	Id             basetypes.Int64Value  `tfsdk:"id"`
	Name           basetypes.StringValue `tfsdk:"name"`
	Slug           basetypes.StringValue `tfsdk:"slug"`
	Url            basetypes.StringValue `tfsdk:"url"`
	state          attr.ValueState
}

func (v RirValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["aggregate_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.AggregateCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["aggregate_count"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Display.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RirValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RirValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RirValue) String() string {
	return "RirValue"
}

func (v RirValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"aggregate_count": basetypes.Int64Type{},
		"description":     basetypes.StringType{},
		"display":         basetypes.StringType{},
		"id":              basetypes.Int64Type{},
		"name":            basetypes.StringType{},
		"slug":            basetypes.StringType{},
		"url":             basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"aggregate_count": v.AggregateCount,
			"description":     v.Description,
			"display":         v.Display,
			"id":              v.Id,
			"name":            v.Name,
			"slug":            v.Slug,
			"url":             v.Url,
		})

	return objVal, diags
}

func (v RirValue) Equal(o attr.Value) bool {
	other, ok := o.(RirValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AggregateCount.Equal(other.AggregateCount) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Display.Equal(other.Display) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v RirValue) Type(ctx context.Context) attr.Type {
	return RirType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RirValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"aggregate_count": basetypes.Int64Type{},
		"description":     basetypes.StringType{},
		"display":         basetypes.StringType{},
		"id":              basetypes.Int64Type{},
		"name":            basetypes.StringType{},
		"slug":            basetypes.StringType{},
		"url":             basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TagsType{}

type TagsType struct {
	basetypes.ObjectType
}

func (t TagsType) Equal(o attr.Type) bool {
	other, ok := o.(TagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagsType) String() string {
	return "TagsType"
}

func (t TagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return nil, diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return nil, diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	displayUrlAttribute, ok := attributes["display_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_url is missing from object`)

		return nil, diags
	}

	displayUrlVal, ok := displayUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_url expected to be basetypes.StringValue, was: %T`, displayUrlAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TagsValue{
		Color:      colorVal,
		Display:    displayVal,
		DisplayUrl: displayUrlVal,
		Id:         idVal,
		Name:       nameVal,
		Slug:       slugVal,
		Url:        urlVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTagsValueNull() TagsValue {
	return TagsValue{
		state: attr.ValueStateNull,
	}
}

func NewTagsValueUnknown() TagsValue {
	return TagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagsValue Attribute Value",
				"While creating a TagsValue value, a missing attribute value was detected. "+
					"A TagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagsValue Attribute Type",
				"While creating a TagsValue value, an invalid attribute value was detected. "+
					"A TagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagsValue Attribute Value",
				"While creating a TagsValue value, an extra attribute value was detected. "+
					"A TagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	displayUrlAttribute, ok := attributes["display_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_url is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	displayUrlVal, ok := displayUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_url expected to be basetypes.StringValue, was: %T`, displayUrlAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	return TagsValue{
		Color:      colorVal,
		Display:    displayVal,
		DisplayUrl: displayUrlVal,
		Id:         idVal,
		Name:       nameVal,
		Slug:       slugVal,
		Url:        urlVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagsValue {
	object, diags := NewTagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagsValueMust(TagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagsType) ValueType(ctx context.Context) attr.Value {
	return TagsValue{}
}

var _ basetypes.ObjectValuable = TagsValue{}

type TagsValue struct {
	Color      basetypes.StringValue `tfsdk:"color"`
	Display    basetypes.StringValue `tfsdk:"display"`
	DisplayUrl basetypes.StringValue `tfsdk:"display_url"`
	Id         basetypes.Int64Value  `tfsdk:"id"`
	Name       basetypes.StringValue `tfsdk:"name"`
	Slug       basetypes.StringValue `tfsdk:"slug"`
	Url        basetypes.StringValue `tfsdk:"url"`
	state      attr.ValueState
}

func (v TagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["color"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Color.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["color"] = val

		val, err = v.Display.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display"] = val

		val, err = v.DisplayUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display_url"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagsValue) String() string {
	return "TagsValue"
}

func (v TagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"color":       basetypes.StringType{},
		"display":     basetypes.StringType{},
		"display_url": basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"color":       v.Color,
			"display":     v.Display,
			"display_url": v.DisplayUrl,
			"id":          v.Id,
			"name":        v.Name,
			"slug":        v.Slug,
			"url":         v.Url,
		})

	return objVal, diags
}

func (v TagsValue) Equal(o attr.Value) bool {
	other, ok := o.(TagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Color.Equal(other.Color) {
		return false
	}

	if !v.Display.Equal(other.Display) {
		return false
	}

	if !v.DisplayUrl.Equal(other.DisplayUrl) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v TagsValue) Type(ctx context.Context) attr.Type {
	return TagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"color":       basetypes.StringType{},
		"display":     basetypes.StringType{},
		"display_url": basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TenantType{}

type TenantType struct {
	basetypes.ObjectType
}

func (t TenantType) Equal(o attr.Type) bool {
	other, ok := o.(TenantType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TenantType) String() string {
	return "TenantType"
}

func (t TenantType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return nil, diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TenantValue{
		Description: descriptionVal,
		Display:     displayVal,
		Id:          idVal,
		Name:        nameVal,
		Slug:        slugVal,
		Url:         urlVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewTenantValueNull() TenantValue {
	return TenantValue{
		state: attr.ValueStateNull,
	}
}

func NewTenantValueUnknown() TenantValue {
	return TenantValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTenantValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TenantValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TenantValue Attribute Value",
				"While creating a TenantValue value, a missing attribute value was detected. "+
					"A TenantValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TenantValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TenantValue Attribute Type",
				"While creating a TenantValue value, an invalid attribute value was detected. "+
					"A TenantValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TenantValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TenantValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TenantValue Attribute Value",
				"While creating a TenantValue value, an extra attribute value was detected. "+
					"A TenantValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TenantValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTenantValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewTenantValueUnknown(), diags
	}

	return TenantValue{
		Description: descriptionVal,
		Display:     displayVal,
		Id:          idVal,
		Name:        nameVal,
		Slug:        slugVal,
		Url:         urlVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewTenantValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TenantValue {
	object, diags := NewTenantValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTenantValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TenantType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTenantValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTenantValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTenantValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTenantValueMust(TenantValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TenantType) ValueType(ctx context.Context) attr.Value {
	return TenantValue{}
}

var _ basetypes.ObjectValuable = TenantValue{}

type TenantValue struct {
	Description basetypes.StringValue `tfsdk:"description"`
	Display     basetypes.StringValue `tfsdk:"display"`
	Id          basetypes.Int64Value  `tfsdk:"id"`
	Name        basetypes.StringValue `tfsdk:"name"`
	Slug        basetypes.StringValue `tfsdk:"slug"`
	Url         basetypes.StringValue `tfsdk:"url"`
	state       attr.ValueState
}

func (v TenantValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Display.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TenantValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TenantValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TenantValue) String() string {
	return "TenantValue"
}

func (v TenantValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"description": basetypes.StringType{},
		"display":     basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description": v.Description,
			"display":     v.Display,
			"id":          v.Id,
			"name":        v.Name,
			"slug":        v.Slug,
			"url":         v.Url,
		})

	return objVal, diags
}

func (v TenantValue) Equal(o attr.Value) bool {
	other, ok := o.(TenantValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Display.Equal(other.Display) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v TenantValue) Type(ctx context.Context) attr.Type {
	return TenantType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TenantValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description": basetypes.StringType{},
		"display":     basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = GroupType{}

type GroupType struct {
	basetypes.ObjectType
}

func (t GroupType) Equal(o attr.Type) bool {
	other, ok := o.(GroupType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GroupType) String() string {
	return "GroupType"
}

func (t GroupType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	depthAttribute, ok := attributes["_depth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`_depth is missing from object`)

		return nil, diags
	}

	depthVal, ok := depthAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`_depth expected to be basetypes.Int64Value, was: %T`, depthAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return nil, diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	siteCountAttribute, ok := attributes["site_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_count is missing from object`)

		return nil, diags
	}

	siteCountVal, ok := siteCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_count expected to be basetypes.Int64Value, was: %T`, siteCountAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GroupValue{
		Depth:       depthVal,
		Description: descriptionVal,
		Display:     displayVal,
		Id:          idVal,
		Name:        nameVal,
		SiteCount:   siteCountVal,
		Slug:        slugVal,
		Url:         urlVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewGroupValueNull() GroupValue {
	return GroupValue{
		state: attr.ValueStateNull,
	}
}

func NewGroupValueUnknown() GroupValue {
	return GroupValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGroupValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GroupValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GroupValue Attribute Value",
				"While creating a GroupValue value, a missing attribute value was detected. "+
					"A GroupValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GroupValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GroupValue Attribute Type",
				"While creating a GroupValue value, an invalid attribute value was detected. "+
					"A GroupValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GroupValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GroupValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GroupValue Attribute Value",
				"While creating a GroupValue value, an extra attribute value was detected. "+
					"A GroupValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GroupValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGroupValueUnknown(), diags
	}

	depthAttribute, ok := attributes["_depth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`_depth is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	depthVal, ok := depthAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`_depth expected to be basetypes.Int64Value, was: %T`, depthAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	siteCountAttribute, ok := attributes["site_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_count is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	siteCountVal, ok := siteCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_count expected to be basetypes.Int64Value, was: %T`, siteCountAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewGroupValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewGroupValueUnknown(), diags
	}

	return GroupValue{
		Depth:       depthVal,
		Description: descriptionVal,
		Display:     displayVal,
		Id:          idVal,
		Name:        nameVal,
		SiteCount:   siteCountVal,
		Slug:        slugVal,
		Url:         urlVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewGroupValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GroupValue {
	object, diags := NewGroupValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGroupValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GroupType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGroupValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGroupValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGroupValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGroupValueMust(GroupValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GroupType) ValueType(ctx context.Context) attr.Value {
	return GroupValue{}
}

var _ basetypes.ObjectValuable = GroupValue{}

type GroupValue struct {
	Depth       basetypes.Int64Value  `tfsdk:"_depth"`
	Description basetypes.StringValue `tfsdk:"description"`
	Display     basetypes.StringValue `tfsdk:"display"`
	Id          basetypes.Int64Value  `tfsdk:"id"`
	Name        basetypes.StringValue `tfsdk:"name"`
	SiteCount   basetypes.Int64Value  `tfsdk:"site_count"`
	Slug        basetypes.StringValue `tfsdk:"slug"`
	Url         basetypes.StringValue `tfsdk:"url"`
	state       attr.ValueState
}

func (v GroupValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["_depth"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["site_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.Depth.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["_depth"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Display.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.SiteCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_count"] = val

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GroupValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GroupValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GroupValue) String() string {
	return "GroupValue"
}

func (v GroupValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"_depth":      basetypes.Int64Type{},
		"description": basetypes.StringType{},
		"display":     basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"site_count":  basetypes.Int64Type{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"_depth":      v.Depth,
			"description": v.Description,
			"display":     v.Display,
			"id":          v.Id,
			"name":        v.Name,
			"site_count":  v.SiteCount,
			"slug":        v.Slug,
			"url":         v.Url,
		})

	return objVal, diags
}

func (v GroupValue) Equal(o attr.Value) bool {
	other, ok := o.(GroupValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Depth.Equal(other.Depth) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Display.Equal(other.Display) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.SiteCount.Equal(other.SiteCount) {
		return false
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v GroupValue) Type(ctx context.Context) attr.Type {
	return GroupType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GroupValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"_depth":      basetypes.Int64Type{},
		"description": basetypes.StringType{},
		"display":     basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"site_count":  basetypes.Int64Type{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = RegionType{}

type RegionType struct {
	basetypes.ObjectType
}

func (t RegionType) Equal(o attr.Type) bool {
	other, ok := o.(RegionType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RegionType) String() string {
	return "RegionType"
}

func (t RegionType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	depthAttribute, ok := attributes["_depth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`_depth is missing from object`)

		return nil, diags
	}

	depthVal, ok := depthAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`_depth expected to be basetypes.Int64Value, was: %T`, depthAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return nil, diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	siteCountAttribute, ok := attributes["site_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_count is missing from object`)

		return nil, diags
	}

	siteCountVal, ok := siteCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_count expected to be basetypes.Int64Value, was: %T`, siteCountAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RegionValue{
		Depth:       depthVal,
		Description: descriptionVal,
		Display:     displayVal,
		Id:          idVal,
		Name:        nameVal,
		SiteCount:   siteCountVal,
		Slug:        slugVal,
		Url:         urlVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewRegionValueNull() RegionValue {
	return RegionValue{
		state: attr.ValueStateNull,
	}
}

func NewRegionValueUnknown() RegionValue {
	return RegionValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRegionValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RegionValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RegionValue Attribute Value",
				"While creating a RegionValue value, a missing attribute value was detected. "+
					"A RegionValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RegionValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RegionValue Attribute Type",
				"While creating a RegionValue value, an invalid attribute value was detected. "+
					"A RegionValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RegionValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RegionValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RegionValue Attribute Value",
				"While creating a RegionValue value, an extra attribute value was detected. "+
					"A RegionValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RegionValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRegionValueUnknown(), diags
	}

	depthAttribute, ok := attributes["_depth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`_depth is missing from object`)

		return NewRegionValueUnknown(), diags
	}

	depthVal, ok := depthAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`_depth expected to be basetypes.Int64Value, was: %T`, depthAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewRegionValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return NewRegionValueUnknown(), diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewRegionValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewRegionValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	siteCountAttribute, ok := attributes["site_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_count is missing from object`)

		return NewRegionValueUnknown(), diags
	}

	siteCountVal, ok := siteCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_count expected to be basetypes.Int64Value, was: %T`, siteCountAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewRegionValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewRegionValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewRegionValueUnknown(), diags
	}

	return RegionValue{
		Depth:       depthVal,
		Description: descriptionVal,
		Display:     displayVal,
		Id:          idVal,
		Name:        nameVal,
		SiteCount:   siteCountVal,
		Slug:        slugVal,
		Url:         urlVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewRegionValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RegionValue {
	object, diags := NewRegionValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRegionValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RegionType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRegionValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRegionValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRegionValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRegionValueMust(RegionValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RegionType) ValueType(ctx context.Context) attr.Value {
	return RegionValue{}
}

var _ basetypes.ObjectValuable = RegionValue{}

type RegionValue struct {
	Depth       basetypes.Int64Value  `tfsdk:"_depth"`
	Description basetypes.StringValue `tfsdk:"description"`
	Display     basetypes.StringValue `tfsdk:"display"`
	Id          basetypes.Int64Value  `tfsdk:"id"`
	Name        basetypes.StringValue `tfsdk:"name"`
	SiteCount   basetypes.Int64Value  `tfsdk:"site_count"`
	Slug        basetypes.StringValue `tfsdk:"slug"`
	Url         basetypes.StringValue `tfsdk:"url"`
	state       attr.ValueState
}

func (v RegionValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["_depth"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["site_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.Depth.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["_depth"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Display.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.SiteCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_count"] = val

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RegionValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RegionValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RegionValue) String() string {
	return "RegionValue"
}

func (v RegionValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"_depth":      basetypes.Int64Type{},
		"description": basetypes.StringType{},
		"display":     basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"site_count":  basetypes.Int64Type{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"_depth":      v.Depth,
			"description": v.Description,
			"display":     v.Display,
			"id":          v.Id,
			"name":        v.Name,
			"site_count":  v.SiteCount,
			"slug":        v.Slug,
			"url":         v.Url,
		})

	return objVal, diags
}

func (v RegionValue) Equal(o attr.Value) bool {
	other, ok := o.(RegionValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Depth.Equal(other.Depth) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Display.Equal(other.Display) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.SiteCount.Equal(other.SiteCount) {
		return false
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v RegionValue) Type(ctx context.Context) attr.Type {
	return RegionType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RegionValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"_depth":      basetypes.Int64Type{},
		"description": basetypes.StringType{},
		"display":     basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"site_count":  basetypes.Int64Type{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return nil, diags
	}

	labelVal, ok := labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.StringValue, was: %T`, labelAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		Label: labelVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	labelVal, ok := labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.StringValue, was: %T`, labelAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewStatusValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		Label: labelVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	Label basetypes.StringValue `tfsdk:"label"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["label"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"label": basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"label": v.Label,
			"value": v.Value,
		})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Label.Equal(other.Label) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"label": basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TagsType{}

type TagsType struct {
	basetypes.ObjectType
}

func (t TagsType) Equal(o attr.Type) bool {
	other, ok := o.(TagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagsType) String() string {
	return "TagsType"
}

func (t TagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return nil, diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return nil, diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	displayUrlAttribute, ok := attributes["display_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_url is missing from object`)

		return nil, diags
	}

	displayUrlVal, ok := displayUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_url expected to be basetypes.StringValue, was: %T`, displayUrlAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TagsValue{
		Color:      colorVal,
		Display:    displayVal,
		DisplayUrl: displayUrlVal,
		Id:         idVal,
		Name:       nameVal,
		Slug:       slugVal,
		Url:        urlVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTagsValueNull() TagsValue {
	return TagsValue{
		state: attr.ValueStateNull,
	}
}

func NewTagsValueUnknown() TagsValue {
	return TagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagsValue Attribute Value",
				"While creating a TagsValue value, a missing attribute value was detected. "+
					"A TagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagsValue Attribute Type",
				"While creating a TagsValue value, an invalid attribute value was detected. "+
					"A TagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagsValue Attribute Value",
				"While creating a TagsValue value, an extra attribute value was detected. "+
					"A TagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	displayUrlAttribute, ok := attributes["display_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_url is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	displayUrlVal, ok := displayUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_url expected to be basetypes.StringValue, was: %T`, displayUrlAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	return TagsValue{
		Color:      colorVal,
		Display:    displayVal,
		DisplayUrl: displayUrlVal,
		Id:         idVal,
		Name:       nameVal,
		Slug:       slugVal,
		Url:        urlVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewTagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagsValue {
	object, diags := NewTagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagsValueMust(TagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagsType) ValueType(ctx context.Context) attr.Value {
	return TagsValue{}
}

var _ basetypes.ObjectValuable = TagsValue{}

type TagsValue struct {
	Color      basetypes.StringValue `tfsdk:"color"`
	Display    basetypes.StringValue `tfsdk:"display"`
	DisplayUrl basetypes.StringValue `tfsdk:"display_url"`
	Id         basetypes.Int64Value  `tfsdk:"id"`
	Name       basetypes.StringValue `tfsdk:"name"`
	Slug       basetypes.StringValue `tfsdk:"slug"`
	Url        basetypes.StringValue `tfsdk:"url"`
	state      attr.ValueState
}

func (v TagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["color"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Color.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["color"] = val

		val, err = v.Display.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display"] = val

		val, err = v.DisplayUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display_url"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagsValue) String() string {
	return "TagsValue"
}

func (v TagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"color":       basetypes.StringType{},
		"display":     basetypes.StringType{},
		"display_url": basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"color":       v.Color,
			"display":     v.Display,
			"display_url": v.DisplayUrl,
			"id":          v.Id,
			"name":        v.Name,
			"slug":        v.Slug,
			"url":         v.Url,
		})

	return objVal, diags
}

func (v TagsValue) Equal(o attr.Value) bool {
	other, ok := o.(TagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Color.Equal(other.Color) {
		return false
	}

	if !v.Display.Equal(other.Display) {
		return false
	}

	if !v.DisplayUrl.Equal(other.DisplayUrl) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v TagsValue) Type(ctx context.Context) attr.Type {
	return TagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"color":       basetypes.StringType{},
		"display":     basetypes.StringType{},
		"display_url": basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TenantType{}

type TenantType struct {
	basetypes.ObjectType
}

func (t TenantType) Equal(o attr.Type) bool {
	other, ok := o.(TenantType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TenantType) String() string {
	return "TenantType"
}

func (t TenantType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return nil, diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TenantValue{
		Description: descriptionVal,
		Display:     displayVal,
		Id:          idVal,
		Name:        nameVal,
		Slug:        slugVal,
		Url:         urlVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewTenantValueNull() TenantValue {
	return TenantValue{
		state: attr.ValueStateNull,
	}
}

func NewTenantValueUnknown() TenantValue {
	return TenantValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTenantValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TenantValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TenantValue Attribute Value",
				"While creating a TenantValue value, a missing attribute value was detected. "+
					"A TenantValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TenantValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TenantValue Attribute Type",
				"While creating a TenantValue value, an invalid attribute value was detected. "+
					"A TenantValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TenantValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TenantValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TenantValue Attribute Value",
				"While creating a TenantValue value, an extra attribute value was detected. "+
					"A TenantValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TenantValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTenantValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewTenantValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewTenantValueUnknown(), diags
	}

	return TenantValue{
		Description: descriptionVal,
		Display:     displayVal,
		Id:          idVal,
		Name:        nameVal,
		Slug:        slugVal,
		Url:         urlVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewTenantValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TenantValue {
	object, diags := NewTenantValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTenantValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TenantType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTenantValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTenantValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTenantValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTenantValueMust(TenantValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TenantType) ValueType(ctx context.Context) attr.Value {
	return TenantValue{}
}

var _ basetypes.ObjectValuable = TenantValue{}

type TenantValue struct {
	Description basetypes.StringValue `tfsdk:"description"`
	Display     basetypes.StringValue `tfsdk:"display"`
	Id          basetypes.Int64Value  `tfsdk:"id"`
	Name        basetypes.StringValue `tfsdk:"name"`
	Slug        basetypes.StringValue `tfsdk:"slug"`
	Url         basetypes.StringValue `tfsdk:"url"`
	state       attr.ValueState
}

func (v TenantValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Display.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TenantValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TenantValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TenantValue) String() string {
	return "TenantValue"
}

func (v TenantValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"description": basetypes.StringType{},
		"display":     basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description": v.Description,
			"display":     v.Display,
			"id":          v.Id,
			"name":        v.Name,
			"slug":        v.Slug,
			"url":         v.Url,
		})

	return objVal, diags
}

func (v TenantValue) Equal(o attr.Value) bool {
	other, ok := o.(TenantValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Display.Equal(other.Display) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v TenantValue) Type(ctx context.Context) attr.Type {
	return TenantType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TenantValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description": basetypes.StringType{},
		"display":     basetypes.StringType{},
		"id":          basetypes.Int64Type{},
		"name":        basetypes.StringType{},
		"slug":        basetypes.StringType{},
		"url":         basetypes.StringType{},
	}
}
